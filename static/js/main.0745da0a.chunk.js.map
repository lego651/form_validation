{"version":3,"sources":["logo.svg","CardForm/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CardForm","Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fields","cardName","cardNumber","month","year","cvc","errors","formIsValid","message","e","_this$state","field","target","name","value","setState","length","match","parseInt","preventDefault","_this2","_this$state2","react_default","a","createElement","className","id","onSubmit","handleSubmit","type","placeholder","onChange","handleChange","Boolean","window","location","hostname","ReactDOM","render","src_CardForm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCkKzBC,SC9JGC,8BDAhB,SAAAD,IAAa,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACXE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QACKI,MAAQ,CACXC,OAAQ,CACNC,SAAY,GACZC,WAAc,GACdC,MAAS,GACTC,KAAQ,GACRC,IAAO,IAETC,OAAQ,CACNL,SAAY,GACZC,WAAc,GACdC,MAAS,GACTC,KAAQ,GACRC,IAAO,IAETE,aAAa,EACbC,QAAS,IAlBAhB,4EAqBAiB,GAAG,IAAAC,EACwBf,KAAKI,MAArCC,EADQU,EACRV,OAAQM,EADAI,EACAJ,OAAQC,EADRG,EACQH,YAClBI,EAAQF,EAAEG,OAAOC,KACjBC,EAAQL,EAAEG,OAAOE,MAErBd,EAAOW,GAASG,EAChBnB,KAAKoB,SAAS,CACZf,WAICA,EAAM,SAAagB,OAAS,IACzBhB,EAAM,SAAaiB,MAAM,gBAI3BX,EAAM,SAAe,GACrBC,GAAc,IAJdD,EAAM,SAAe,2BACrBC,GAAc,IAOfP,EAAM,WAAegB,OAAS,IACI,KAAhChB,EAAM,WAAegB,QACtBV,EAAM,WAAiB,wBACvBC,GAAc,IAEdD,EAAM,WAAiB,GACvBC,GAAc,IAGfP,EAAM,MAAUgB,OAAS,IACI,IAA3BhB,EAAM,MAAUgB,QACjBV,EAAM,MAAY,iBAClBC,GAAc,GACNW,SAASlB,EAAM,OAAa,IACpCM,EAAM,MAAY,iBAClBC,GAAc,IAEdD,EAAM,MAAY,GAClBC,GAAc,IAGfP,EAAM,KAASgB,OAAS,IACI,IAA1BhB,EAAM,KAASgB,QAChBV,EAAM,KAAW,gBACjBC,GAAc,GACNW,SAASlB,EAAM,MA1CR,MA2CfM,EAAM,KAAW,gBACjBC,GAAc,IAEdD,EAAM,KAAW,GACjBC,GAAc,IAGfP,EAAM,IAAQgB,OAAS,IACI,IAAzBhB,EAAM,IAAQgB,QACfV,EAAM,IAAU,eAChBC,GAAc,IAEdD,EAAM,IAAU,GAChBC,GAAc,IAIlBZ,KAAKoB,SAAS,CACZR,qDAGSE,GACXA,EAAEU,iBACCxB,KAAKI,MAAMQ,YACZZ,KAAKoB,SAAS,CACZP,QAAS,wBAGXb,KAAKoB,SAAS,CACZP,QAAS,qDAIP,IAAAY,EAAAzB,KAAA0B,EACyC1B,KAAKI,MAAtCO,GADRe,EACArB,OADAqB,EACQf,QAAqBE,GAD7Ba,EACgBd,YADhBc,EAC6Bb,SACnC,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAME,GAAG,OAAOC,SAAU,SAAClB,GAAKW,EAAKQ,aAAanB,KAChDa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OACLH,GAAG,WACHb,KAAK,WACLiB,YAAY,aACZC,SAAU,SAACtB,GAAKW,EAAKY,aAAavB,MACzCa,EAAAC,EAAAC,cAAA,QAAMC,UAAYnB,EAAM,SAAaU,OAAS,EAAI,YAAc,WAAhE,IAA8EV,EAAM,SAApF,MAEFgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OACLH,GAAG,aACHb,KAAK,aACLiB,YAAY,mBACZC,SAAU,SAACtB,GAAKW,EAAKY,aAAavB,MACzCa,EAAAC,EAAAC,cAAA,QAAMC,UAAYnB,EAAM,WAAeU,OAAS,EAAI,YAAc,WAAlE,IAAgFV,EAAM,WAAtF,MAEFgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,wGACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OACLH,GAAG,QACHb,KAAK,QACLiB,YAAY,KACZC,SAAU,SAACtB,GAAKW,EAAKY,aAAavB,MACzCa,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OACLH,GAAG,OACHb,KAAK,OACLiB,YAAY,OACZC,SAAU,SAACtB,GAAKW,EAAKY,aAAavB,MACzCa,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OACLH,GAAG,MACHb,KAAK,MACLiB,YAAY,MACZC,SAAU,SAACtB,GAAKW,EAAKY,aAAavB,MACzCa,EAAAC,EAAAC,cAAA,QAAMC,UAAYnB,EAAM,MAAUU,OAAS,EAAI,YAAc,WAA7D,IAA2EV,EAAM,MAAjF,KACAgB,EAAAC,EAAAC,cAAA,QAAMC,UAAYnB,EAAM,KAASU,OAAS,EAAI,YAAc,WAA5D,IAA0EV,EAAM,KAAhF,KACAgB,EAAAC,EAAAC,cAAA,QAAMC,UAAYnB,EAAM,IAAQU,OAAS,EAAI,YAAc,WAA3D,IAAyEV,EAAM,IAA/E,MAEFgB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SACLJ,UAAU,eACVX,MAAM,WACbQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA4BjB,EAA5B,eAvJWjB,cESH0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCXNoB,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAcC,SAASC,eAAe,SD0HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0745da0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './style.css'\n\nclass CardForm extends Component {\n  constructor(){\n    super()\n    this.state = {\n      fields: {\n        'cardName': '',\n        'cardNumber': '',\n        'month': '',\n        'year': '',\n        'cvc': ''\n      },\n      errors: {\n        'cardName': '',\n        'cardNumber': '',\n        'month': '',\n        'year': '',\n        'cvc': ''\n      },\n      formIsValid: false,\n      message: ''\n    }\n  }\n  handleChange(e) {\n    let { fields, errors, formIsValid } = this.state\n    let field = e.target.name\n    let value = e.target.value\n    let CURRENT_YEAR = 2019\n    fields[field] = value\n    this.setState({\n      fields\n    })\n\n    // check cardName_ rule: only letters allowed\n    if(fields[\"cardName\"].length > 0) {\n      if(!fields[\"cardName\"].match(/^[a-zA-Z]*$/)) {\n        errors[\"cardName\"] = \"Invalid Cardholder Name.\"\n        formIsValid = false\n      } else {\n        errors[\"cardName\"] = \"\"\n        formIsValid = true\n      }\n    }\n    // check cardNumber_ rule: must be 16 length\n    if(fields[\"cardNumber\"].length > 0) {\n      if(fields[\"cardNumber\"].length !== 16) {\n        errors[\"cardNumber\"] = \"Invalid Cardh Number.\"\n        formIsValid = false\n      } else {\n        errors[\"cardNumber\"] = \"\"\n        formIsValid = true\n      }\n    }\n    if(fields[\"month\"].length > 0) {\n      if(fields[\"month\"].length !== 2) {\n        errors[\"month\"] = \"Invalid Month.\"\n        formIsValid = false\n      } else if(parseInt(fields[\"month\"]) > 12){\n        errors[\"month\"] = \"Invalid Month.\"\n        formIsValid = false\n      } else {\n        errors[\"month\"] = \"\"\n        formIsValid = true\n      }\n    }\n    if(fields[\"year\"].length > 0) {\n      if(fields[\"year\"].length !== 4) {\n        errors[\"year\"] = \"Invalid Year.\"\n        formIsValid = false\n      } else if(parseInt(fields[\"year\"]) < CURRENT_YEAR){\n        errors[\"year\"] = \"Invalid Year.\"\n        formIsValid = false\n      } else {\n        errors[\"year\"] = \"\"\n        formIsValid = true\n      }\n    }\n    if(fields[\"cvc\"].length > 0) {\n      if(fields[\"cvc\"].length !== 3) {\n        errors[\"cvc\"] = \"Invalid CVC.\"\n        formIsValid = false\n      } else {\n        errors[\"cvc\"] = \"\"\n        formIsValid = true\n      }\n    }\n\n    this.setState({\n      formIsValid\n    })\n  }\n  handleSubmit(e) {\n    e.preventDefault()\n    if(this.state.formIsValid) {\n      this.setState({\n        message: 'Payment Successful!'\n      })\n    } else {\n      this.setState({\n        message: 'Payment Failed!'\n      })\n    }\n  }\n  render(){\n    let { fields, errors, formIsValid, message } = this.state\n    return(\n      <div className=\"card-form-wrapper\">\n        <h1> Payment Validation </h1>\n        <div className=\"card-form\">\n          <form id=\"card\" onSubmit={(e)=>{this.handleSubmit(e)}}>\n            <div className=\"form-group\">\n              <h3> Name on Card </h3>\n              <input type=\"text\"\n                     id=\"cardName\"\n                     name=\"cardName\"\n                     placeholder=\"John Krane\"\n                     onChange={(e)=>{this.handleChange(e)}} />\n              <span className={(errors['cardName'].length > 0 ? \"withError\" : \"noError\")}> {errors['cardName']} </span>\n            </div>\n            <div className=\"form-group\">\n              <h3> Card Number </h3>\n              <input type=\"text\"\n                     id=\"cardNumber\"\n                     name=\"cardNumber\"\n                     placeholder=\"1234123412341234\"\n                     onChange={(e)=>{this.handleChange(e)}} />\n              <span className={(errors['cardNumber'].length > 0 ? \"withError\" : \"noError\")}> {errors['cardNumber']} </span>\n            </div>\n            <div className=\"form-group\">\n              <h3> Date of Expiration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CW/CVC</h3>\n              <input type=\"text\"\n                     id=\"month\"\n                     name=\"month\"\n                     placeholder=\"07\"\n                     onChange={(e)=>{this.handleChange(e)}} />\n              <input type=\"text\"\n                     id=\"year\"\n                     name=\"year\"\n                     placeholder=\"2017\"\n                     onChange={(e)=>{this.handleChange(e)}} />\n              <input type=\"text\"\n                     id=\"cvc\"\n                     name=\"cvc\"\n                     placeholder=\"123\"\n                     onChange={(e)=>{this.handleChange(e)}} />\n              <span className={(errors['month'].length > 0 ? \"withError\" : \"noError\")}> {errors['month']} </span>\n              <span className={(errors['year'].length > 0 ? \"withError\" : \"noError\")}> {errors['year']} </span>\n              <span className={(errors['cvc'].length > 0 ? \"withError\" : \"noError\")}> {errors['cvc']} </span>\n            </div>\n            <input type=\"submit\"\n                   className=\"submitButton\"\n                   value=\"Submit\" />\n            <div className=\"message\"> { message } </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CardForm\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CardForm from './CardForm'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CardForm />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}